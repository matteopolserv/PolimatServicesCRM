// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PolimatServicesCRM.Data;

#nullable disable

namespace PolimatServicesCRM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PolimatServicesCRM.Models.ClientModel", b =>
                {
                    b.Property<string>("ClientId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientCountry")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientNip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientOthers")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientRegon")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientZip")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notices")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PolimatServicesCRM.Models.DelegationModel", b =>
                {
                    b.Property<string>("DelegationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeleagationArrivngPlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeleagationDeparturePlace")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeleagationDuringTime")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DeleagationPerDiemRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DeleagationPerDiemTotal")
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegatedId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegatedName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegatedPost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegatingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegatingName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegatingPost")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DelegationEndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DelegationOvernightStay")
                        .HasColumnType("TEXT");

                    b.Property<string>("DelegationPurpose")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DelegationStartDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DelegationTotalCost")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Distance")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DistanceDistanceRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DistanceTotalCost")
                        .HasColumnType("TEXT");

                    b.Property<string>("Vechicle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("DelegationId");

                    b.ToTable("Delegations");
                });

            modelBuilder.Entity("PolimatServicesCRM.Models.InvoiceModel", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CretedTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Payed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDeadline")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RceivedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalBrutAmmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalNetAmmount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalVatAmmount")
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("PolimatServicesCRM.Models.ProductServiceModel", b =>
                {
                    b.Property<string>("ProductServiceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceModelInvoiceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MadeDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notices")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Payed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductServiceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductServiceNetAmmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductServiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ProductServicePrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductServiceTotal")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductServiceVat")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ProductServiceVatAmmount")
                        .HasColumnType("TEXT");

                    b.HasKey("ProductServiceId");

                    b.HasIndex("InvoiceModelInvoiceId");

                    b.ToTable("ProductsServices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolimatServicesCRM.Models.ProductServiceModel", b =>
                {
                    b.HasOne("PolimatServicesCRM.Models.InvoiceModel", null)
                        .WithMany("Products")
                        .HasForeignKey("InvoiceModelInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PolimatServicesCRM.Models.InvoiceModel", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
